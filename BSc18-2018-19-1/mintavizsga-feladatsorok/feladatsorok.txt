ELTE IK Imperatív programozás mintavizsga feladatsorok 2018/19/1 félév


1. FELADATSOR

1. Mit ír ki a következõ program?

int a = 7;
if (a % 3 == 2)
    printf("result1");
else
    printf("result2");

(A) nem fordul
(B) semmit (üres képernyõ)
(C) result1
(D) result2

2. Hány iterációt hajt végre a következõ ciklus (hányszor
hajtódik végre a printf() függvényhívás)?

int i = 10;
while (--i > 3)
    printf("%d", i);

(A) nem fordul
(B) 0
(C) 6
(D) 7

3. Mit ír ki a következõ program?

char msg[] = "CBA";
printf("%d", msg[3]);

(A) futási hiba: az msg tömbnek 3 eleme van, nem hivatkozhatunk az
utolsó utáni elemre
(B) nem definiált viselkedés (undefined behaviour)
(C) 65
(D) 0

4. Melyik deklarációnak felel meg a következõ:
"point" nevû, elõjel nélküli, hosszú egész (long int)
konstans változóra mutató pointer

(A) const unsigned long int* point;
(B) const long int* point;
(C) unsigned long int* const point;
(D) const signed long int* point;

5. Melyik állítás igaz a következõ program esetén?

int* pointer = (int*)malloc(5000 * sizeof(int));

(A) a heap-en létrejön egy sizeof(int*) méretû tárterület ahol
tárolódik a stack-en létrejött, egy legalább 5000 * sizeof(int)
méretû tárterület kezdõ memóriacíme

(B) a stack-en létrejön egy sizeof(int*) méretû tárterület ahol
tárolódik a heap-en létrejött, egy legalább 5000 * sizeof(int)
méretû tárterület kezdõ memóriacíme

(C) a heap-en létrejön egy sizeof(int*) méretû tárterület ahol
tárolódik a heap-en létrejött, egy legalább 5000 * sizeof(int)
méretû tárterület kezdõ memóriacíme

(D) egyik sem

6. C-ben kiértékelés után mi lesz az 5/10 + 100 kifejezés típusa?

(A) double
(B) float
(C) int
(D) unsigned int

7. Melyik állítás hamis?

(A) C-ben a változók deklarációja nem mindig jár memóriafoglalással
(B) void x; deklaráció esetén az x változónak tetszõleges
típusú érték adható
(C) a main() függvény visszatérési értéke információt ad az
operációs rendszernek a program sikerességérõl
(D) a main() függvény paraméterben megkapja a program
parancssori argumentumait

8. Melyik állítás hamis?

(A) Python-ban az indentálást behúzással adjuk meg
(B) a Python magas szintû programozási nyelv
(C) Python-ban a karakterlánc immutable típus
(D) Python-ban minden változót deklarálni kell a felhasználása elõtt

9. Mit ír ki a következõ Python program?

list = [1, 10]
print(2 in list)

(A) True
(B) False
(C) nem fordul: [2] in list lenne helyes
(D) nem fordul: nincs in operátor Python-ban

10. Mit jelent a szimultán értékadás Python-ban?

(A) egy utasításban több változó kap különbözõ értéket
(B) egy utasításban több változó kapja ugyanazt az értéket
(C) Python-ban nincs szimultán értékadás
(D) egyik sem a megadottak közül

Programozási feladat

Írjon függvényt egy sztringben az "[a-z]" alakú rövidítések
feloldására, tehát a sztringben a "[a-z]" helyett "abcde...xyz"
szerepeljen. Elég az angol ABC betûivel dolgozni.

Például a "This is my [f-o] string"-re a helyes output:
"This is my fhijklmno string". Vegye figyelembe, hogy egy sztringben
több rövidítés is lehet, azonban rövidítésen belül nem lehet
másik rövidítés. Felteheto hogy a [ és ] karakterek csak ezen
célból fordulnak elõ a sztringben, és mindegyik rövidítés
helyesen van megadva.

Szemléltesse a függvény mûködését.

Példa input:
"This is [f-o] to demo [a-z] my [a-b] [b-b] program [b-d]"

Elvárt output:
"This is fghijklmno to demo abcdefghijklmnopqrstuvwxyz my ab b program bcd"

-------------------------------------------------------------------------------

2. FELADATSOR

1. Mit ír ki a következõ program?

int a = -1;
int b = 4;
if (a < 0 || b < 0)
    printf("A");
else
    printf("B");

(A) A
(B) B
(C) semmit (üres képernyõ)
(D) nem fordul

2. Mennyi lesz az x változó értéke a következõ program
futása után?

int x = 20;
for (; x > 0; x = x - 3);

(A) 1
(B) 0
(C) -1
(D) nem fordul

3. Mit ír ki a következõ program?

printf("%d", 5/2 + 10);

(A) 11
(B) 12
(C) 12.5
(D) nem fordul

4. A felsorolt lehetõségek közül melyik értékadás helyes
és változtatja meg az x változó értékét 5-re?

int x = 2;
int* pint = &x;
int** ppint = &pint;

(A) *ppint = 5
(B) **ppint = *x + 3
(C) **ppint = *pint + 3
(D) egyik sem

5. Mi a hiba a következó C kódban, ha a
"10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0," output-ot szeretnénk?

printf("Counting back from 10 to 0\n\n");
int idx = 11;
while (idx != 1)
{
    printf("%d, ", idx = idx - 1);
}

(A) Az idx változó értékét 10-rõl kellene indítani
(B) Az idx = idx - 1 értékadás nem lehet a printf() argumentuma,
helyette idx-- kellene
(C) Az idx = idx - 1 értékadás nem lehet a printf() argumentuma,
helyette --idx kellene
(D) A ciklus feltételének idx != 0 vagy idx-nek kellene lennie

6. Melyik deklaráció felel meg a következõnek: egy elõjel
nélküli, hosszú egész (long int)-eket tartalmazó tömböt
és egy egész számot fogadó függvény, amely nem tér
vissza értékkel.

(A) void foo(array of unsigned long int, int size) {}
(B) void foo(unsigned long int* array, int size) {}
(C) int foo(unsigned long[], int size) {}
(D) egyik sem

7. Melyik állítás igaz?

(A) a C alacsonyszintû programozási nyelv
(B) C-ben a változók deklarációja mindig memóriafoglalással jár
(C) C-ben minden függvény tér vissza értékkel
(D) C-ben a függvényparamétereket átvehetjük érték vagy
referencia szerint is

8. Mit ír ki a következõ Python program?

list = ["hello world", -34, 3.14, 77, 0.1]
print(list[2:])

(A) szintaktikai hiba: hiányzik az intervallum felsõ határa
(B) [3.14, 77, 0.1]
(C) [-34, 3.14, 77, 0.1]
(D) [3.14]

9. Mit ír ki a következõ Python kód?

x = 1
y = 2

def function():
    y = x;
    print(x)
    x = 3

function()

(A) 1
(B) 3
(C) szintaktikai hiba: x nevû változó már van a programban
(D) szintaktikai hiba: az x változó function()-ban lokális,
nem hivatkozhatunk rá az értékadása elõtt

10. Melyik állítás hamis?

(A) C-ben deklarálhatunk függvényt függvényen belül
(B) C-ben nem definiálhatunk függvényt függvényen belül
(C) Python-ban a beágyazott függvények láthatósága
az egész program
(D) Python-ban a beágyazott függvények láthatósága
az õt definiáló függvény

Programozási feladat

Írjon függvényt, amely a paraméterként kapott egészeket
tartalmazó tömbön (Python választás esetén listán) megvalósítja
a bináris (logaritmikus) keresést.

A logaritmikus keresés egy monoton növekvõen rendezett tömb
esetén megkeresi valamely adott elem indexét. Az algoritmus
elõször megfelezi a teljes tömböt, megnézi hogy a középen
lévõ elem hogyan viszonyul a keresett értékhez. Ha egyenlõ
vele, készen vagyunk. Ha a középen lévõ elem kisebb mint a
keresett érték, akkor a keresett elem a megfelezett tömb felsõ
részében van, máskülönben az alsó részében.

Ezt a mûködést alkalmazzuk a tömb megfelelõ részére.
Amennyiben a vizsgált rész mérete 0, akkor a keresett érték
nem szerepel a tömbben, ekkor a visszatérési érték legyen -1.

Mutassa be a függvény mûködését.

Példa input 1:
[-2, 0, 5, 7, 11, 15, 23], keressük a 15-ös elemet

Elvárt output 1:
5

Példa input 2:
[-2, 0, 5, 7, 11, 15, 23], keressük a 16-os elemet

Elvárt output 2:
-1

-------------------------------------------------------------------------------

